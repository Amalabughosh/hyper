{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/amal/Desktop/project/blockchain_pro/fabric-samples/client/node_modules/@babel/runtime/regenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj[\"default\"] = obj;\n    return newObj;\n  }\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar FetchData = function FetchData(props) {\n  var _useState = (0, _react.useState)(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      err = _useState4[0],\n      setErr = _useState4[1];\n\n  var _useState5 = (0, _react.useState)([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      res = _useState6[0],\n      setRes = _useState6[1];\n\n  (0, _react.useEffect)(function () {\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var resFunc, _res;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              resFunc = {\n                arrayBuffer: 'arrayBuffer',\n                blob: 'blob',\n                formData: 'formData',\n                json: 'json',\n                text: 'text'\n              };\n              _context.prev = 1;\n\n              if (!(Array.isArray(props.fetch) && props.fetch[0])) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 5;\n              return Promise.all(props.fetch);\n\n            case 5:\n              _res = _context.sent;\n\n              if (!(props.type && resFunc[props.type])) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 9;\n              return Promise.all(_res.map(function (res) {\n                return res[resFunc[props.type]]();\n              }));\n\n            case 9:\n              _res = _context.sent;\n\n            case 10:\n              setRes(_res);\n              setLoading(false);\n              _context.next = 16;\n              break;\n\n            case 14:\n              if (!(!Array.isArray(props.fetch) || props.fetch.length === 0)) {\n                _context.next = 16;\n                break;\n              }\n\n              throw new Error(\"FetchData: fetch prop must be an array of json fetched promises\");\n\n            case 16:\n              _context.next = 22;\n              break;\n\n            case 18:\n              _context.prev = 18;\n              _context.t0 = _context[\"catch\"](1);\n              setErr(_context.t0);\n              setLoading(false);\n\n            case 22:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 18]]);\n    }))();\n  }, [props]);\n  return _react[\"default\"].createElement(_react[\"default\"].Fragment, null, props.children({\n    loading: loading,\n    err: err,\n    res: res\n  }));\n};\n\nvar _default = FetchData;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}